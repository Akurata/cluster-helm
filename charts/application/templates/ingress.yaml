{{- range $name, $data := .Values.services }}
{{- if and ($data.ports) ($data.ingress.host) }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.org/client-max-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: {{ $data.ingress.timeout | default 600 | quote }}
    nginx.ingress.kubernetes.io/proxy-send-timeout: {{ $data.ingress.timeout | default 600 | quote }}
    {{- /*
      Add premade configuration for a websocket at a given route
    */}}
    {{- if $data.ingress.websocket }}
    nginx.ingress.kubernetes.io/server-snippets: |
      location ~ {{ $data.ingress.websocket }} {
        proxy_set_header Upgrade $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
      }
    {{- end }}
    {{- if $data.ingress.cors }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Access-Control-Allow-Origin: {{ $data.cors }}";
    {{- end }}
  name: {{ $.Values.namespace }}-{{ $name }}-ingress
  namespace: {{ $.Values.namespace }}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ $data.ingress.host }}
      http:
        paths:
          - backend:
              service:
                name: {{ $name }}
                port:
                  number: {{ $data.ports | first }}
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - {{ $data.ingress.host }}
      secretName: {{ $.Values.namespace }}-{{ $name }}-tls
{{- end }}
{{- end }}