{{- range $name, $data := .Values.services }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  labels:
    app: {{ $name }}
  name: {{ $name }}
  namespace: {{ $.Values.namespace }}
spec:
  replicas: {{ $data.replicas }}
  selector:
    matchLabels:
      app: {{ $name }}
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: {{ $name }}
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
        - name: {{ $name }}
          image: "{{ $data.image.repo }}:{{ $data.image.tag }}"
          imagePullPolicy: Always
          resources:
            requests:
              cpu: {{ $data.resources.requests.cpu | quote }}
              memory: {{ $data.resources.requests.memory }}
            limits:
              cpu: {{ $data.resources.limits.cpu | quote }}
              memory: {{ $data.resources.limits.memory }}
          
          {{- /*
          Deployment port
          */}}
          {{- if $data.ports }}
          ports:
            {{- range $data.ports }}
            - containerPort: {{ . }}
            {{- end }}
          {{- end }}

          {{- /*
          Add command overrides if any specified
          */}}
          {{- if $data.command }}
          command: ["{{ $data.command.cmd }}"]
          args:
            {{- range $data.command.args }}
            - "{{ . }}"
            {{- end }}
          {{- end }}

          {{- /*
          Manually define any deployment env variables
          */}}
          {{- if $data.env }}
          env:
            {{- range $name, $value := $data.env }}
            {{- if kindIs "map" $value }}
            - name: {{ $name }}
              valueFrom:
                {{- toYaml $value | nindent 16 -}}
            {{- else }}
            - name: {{ $name | toString }}
              value: {{ $value | toString }}
            {{- end }}
            {{- end }}
          {{- end }}

          {{- /*
          If any secrets or configs are passed, link them here
          */}}
          {{- if or ($data.secrets) ($data.configs) }}
          envFrom:
            {{- range $data.secrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}

            {{- range $data.configs }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
          {{- end }}

    {{- /*
    Add any volume mounts here at the end
    */}}
    {{- if $data.volume }}
          volumeMounts:
          {{- range $idx, $value := $data.volume }}
            - mountPath: {{ $value.mount }}
              name: data-vol-{{ $idx }}
          {{- end }}
      volumes:
      {{- range $idx, $value := $data.volume }}
        - name: data-vol-{{ $idx }}
          {{- /* 
          Mount pvc if its passed in the volume field,
          otherwise assume its a config map mount
          */}}
          {{- if $value.pvc }}
          persistentVolumeClaim:
            claimName: {{ $value.pvc }}
          {{- else if $value.configMap}}
          configMap:
            name: {{ $value.configMap }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- end }}
    {{- end }}
{{- end }}